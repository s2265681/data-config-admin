name: Sync Multiple Files to S3 Production

on:
  push:
    branches:
      - main
    paths:
      - 'app-config/**'
      - 'config/folders.json'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync-to-s3-production:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Test AWS connection
        run: |
          aws sts get-caller-identity --region ap-southeast-2
          echo "AWS connection test successful"
          
      - name: Validate configuration
        run: npm run manage-folders validate
        
      - name: Sync multiple files to S3 Production
        run: npm run sync-to-s3
        env:
          S3_BUCKET: rock-service-data
          AWS_REGION: ap-southeast-2
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF: ${{ github.ref }}
          ENVIRONMENT: production
          SYNC_SOURCE: github-main
          ANTI_CIRCULAR: true
          
      - name: Monitor sync status
        run: npm run monitor
          
      - name: Verify production sync
        run: |
          echo "验证生产环境S3同步..."
          echo "检查所有配置文件:"
          aws s3 ls s3://rock-service-data/config/production/ --recursive
          
      - name: Notify production deployment
        run: |
          echo "🚀 生产环境多文件配置已更新"
          echo "📁 S3路径: s3://rock-service-data/config/production/"
          echo "📂 源文件夹: app-config/"
          echo "🔗 Commit: ${{ github.sha }}"
          echo "👤 提交者: ${{ github.actor }}"
          echo "🔄 同步方向: GitHub → S3 (单向)"
          
      - name: Auto merge main to staging
        run: |
          echo "🔄 开始自动合并main到staging分支..."
          
          # 使用GitHub CLI创建Pull Request
          echo "📝 创建Pull Request: main -> staging"
          
          # 检查是否已经存在相同的PR
          existing_pr=$(gh pr list --head main --base staging --json number --jq '.[0].number' 2>/dev/null || echo "")
          
          if [[ -n "$existing_pr" ]]; then
            echo "⚠️  已存在Pull Request #$existing_pr，跳过创建"
          else
            # 创建新的Pull Request
            pr_body="自动合并main分支到staging分支

**触发原因**: main分支有新的提交
**提交SHA**: ${{ github.sha }}
**提交者**: ${{ github.actor }}
**时间**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

---
*此PR由GitHub Actions自动创建*"
            
            pr_number=$(gh pr create \
              --title "🔄 Auto-merge: main -> staging" \
              --body "$pr_body" \
              --base staging \
              --head main \
              --json number \
              --jq '.number' 2>/dev/null || echo "")
            
            if [[ -n "$pr_number" ]]; then
              echo "✅ 成功创建Pull Request #$pr_number"
              
              # 自动合并PR
              echo "🔄 自动合并Pull Request..."
              if gh pr merge $pr_number --merge --delete-branch; then
                echo "🎉 成功合并main分支到staging分支"
              else
                echo "⚠️  自动合并失败，可能需要手动处理"
              fi
            else
              echo "❌ 创建Pull Request失败"
            fi
          fi
          
          echo "📋 合并详情:"
          echo "   源分支: main"
          echo "   目标分支: staging"
          echo "   提交SHA: ${{ github.sha }}"
          echo "   提交者: ${{ github.actor }}" 